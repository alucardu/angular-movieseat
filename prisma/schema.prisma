datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x"]
}

model User {
  id                Int     @id @default(autoincrement())
  email             String  @unique
  username          String  @unique
  password          String
  confirmation_code String?
  movies            Movie[] @relation(name: "MoviesToUsers")
  friends           User[]  @relation(name: "UserFriends")
  friendOf          User[]  @relation(name: "UserFriends")
  notifications     Notification[] @relation(name: "NotificationToUser")
  actionsPerformed  Notification[] @relation(name: "ActionsPerformed")
}

model Movie {
  id             Int           @id @default(autoincrement())
  tmdb_id        String        @unique
  title          String
  original_title String?
  poster_path    String?
  backdrop_path  String?
  release_date   String?
  overview       String?
  certification  String?
  tagline        String?
  runtime        Int?
  vote_average   Int?
  added_at        DateTime       @default(now())
  clips          Clip[]         @relation(name: "MovieToClips")
  genres         Genre[]        @relation(name: "MovieToGenres")
  persons        PersonMovie[]  @relation(name: "MovieToPersons")
  users          User[]         @relation(name: "MoviesToUsers")
  notifications  Notification[] @relation(name: "NotificationToMovie")
}

model Person {
  id                   Int           @id @default(autoincrement())
  adult                Boolean
  gender               Int
  tmdb_id              Int           @unique
  known_for_department String
  name                 String
  original_name        String
  popularity           Float
  profile_path         String?
  movies               PersonMovie[] @relation(name: "PersonToMovie")
}

model PersonMovie {
  id              Int     @id @default(autoincrement())
  credit_id       String
  department      String?
  job             String?
  cast_id         Int?
  character       String?
  order           Int?

  movie           Movie   @relation(name: "MovieToPersons", fields: [movieId], references: [id], onDelete: Cascade)
  movieId         Int

  person          Person  @relation(name: "PersonToMovie", fields: [personId], references: [id], onDelete: Cascade)
  personId        Int
}

model Clip {
  id              Int     @id @default(autoincrement())
  name            String
  key             String
  site            String
  type            String
  official        Boolean
  published_at    String
  movie           Movie   @relation(name: "MovieToClips", fields: [movieId], references: [id], onDelete: Cascade)
  movieId         Int
}

model Genre {
  id              Int     @id @default(autoincrement())
  name            String? @unique
  movies          Movie[] @relation(name: "MovieToGenres")
}

model Notification {
  id              Int     @id @default(autoincrement())
  type            String
  code            String
  read            Boolean
  createdAt       DateTime @default(now())

  receiver        User[]  @relation(name: "NotificationToUser")

  performer       User    @relation(name: "ActionsPerformed", fields: [performerId], references: [id], onDelete: Cascade)
  performerId     Int

  movie           Movie?  @relation(name: "NotificationToMovie", fields: [movieId], references: [id], onDelete: Cascade)
  movieId         Int
}
